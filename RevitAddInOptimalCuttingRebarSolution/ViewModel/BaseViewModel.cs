using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

namespace RevitAddInOptimalCuttingRebarSolution.ViewModel
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        #region methode datagrid
        public string GetCellValue(DataGrid datagrid, int row, int column)
        {
            var cellInfo = new DataGridCellInfo(
                datagrid.Items[row], datagrid.Columns[column]);

            DataGridCell cell = null;
            var cellContent = cellInfo.Column.GetCellContent(cellInfo.Item);
            if (cellContent != null)
                cell = (DataGridCell)cellContent.Parent;

            if (cell == null) return string.Empty;

            // if DataGridTextColumn / DataGridComboBoxColumn is used 
            // or AutoGeneratedColumns is True
            if (cell.Content is TextBlock)
                return ((TextBlock)cell.Content).Text;
            else if (cell.Content is ComboBox)
                return ((ComboBox)cell.Content).Text;

            // if DataGridTemplateColumn is used 
            // assuming cells are either TextBox, TextBlock or ComboBox. Other Types could be handled the same way.
            else
            {
                var txtPresenter = FindVisualChild<TextBox>((ContentPresenter)cell.Content);
                if (txtPresenter != null) return txtPresenter.Text;
                var txbPresenter = FindVisualChild<TextBlock>((ContentPresenter)cell.Content);
                if (txbPresenter != null) return txbPresenter.Text;
                var cmbPresenter = FindVisualChild<ComboBox>((ContentPresenter)cell.Content);
                if (cmbPresenter != null) return cmbPresenter.Text;
            }
            return string.Empty;
        }

        public static T FindVisualChild<T>(DependencyObject obj) where T : DependencyObject
        {
            for (int i = 0; i < VisualTreeHelper.GetChildrenCount(obj); i++)
            {
                DependencyObject child = VisualTreeHelper.GetChild(obj, i);
                if (child != null && child is T)
                    return (T)child;
                else
                {
                    T childOfChild = FindVisualChild<T>(child);
                    if (childOfChild != null)
                        return childOfChild;
                }
            }
            return null;
        }
        #endregion 
    }
    public class RelayCommand<T> : ICommand
    {
        private readonly Predicate<T> _canExecute;
        private readonly Action<T> _execute;

        public RelayCommand(Predicate<T> canExecute, Action<T> execute)
        {
            if (execute == null)
                throw new ArgumentNullException("execute");
            _canExecute = canExecute;
            _execute = execute;
        }

        public bool CanExecute(object parameter)
        {
            try
            {
                return _canExecute == null ? true : _canExecute((T)parameter);
            }
            catch
            {
                return true;
            }
        }

        public void Execute(object parameter)
        {
            _execute((T)parameter);
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
    }
}
